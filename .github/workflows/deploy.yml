name: Deploy VitePress site to Pages

on:
  push:
    branches: [master]

# 设置tokenn访问权限
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 22.14.0
          cache: npm # 设置缓存
      # 安装依赖
      - name: Install dependencies
        run: npm install
        
      # 构建 VitePress 项目
      - name: Build with VitePress
        run: |
          npm run docs:build # 执行构建命令
          touch .nojekyll    # 防止 Jekyll 处理

      # 调试构建输出（可选）
      - name: Debug build output
        run: ls -la .vitepress/dist

      # 上传构建产物到 Artifact 中心
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4 # 使用最新版本 v4
        with:
          path: .vitepress/dist # 指定构建产物路径，当前是根目录，如果是docs需要加docs/的前缀

  # 部署工作
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 从后续的输出中获取部署后的页面URL
    needs: build    # 在build后面完成
    runs-on: ubuntu-latest  # 运行在最新版本的ubuntu系统上
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment  # 指定id
        uses: actions/deploy-pages@v2 # 将之前的构建产物部署到github pages中